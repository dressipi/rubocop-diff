#!/bin/sh

FINAL_STATUS=0

assert_equals() {
  if [ $# -ne 3 ]; then
    printf "Incorrect arguments in the followingn assert_equals\n"
    printf "  assert_equals %s\n" "$@"
    exit 255
  fi
  message=$1
  actual=$2
  expected=$3

  if [ "$actual" = "$expected" ]; then
    printf "%s ...✅\n" "${message}"
  else
    printf "***********************************\n"
    printf "%s ...❌\n"           "${message}"
    printf "  Actual:   '%s'\n"  "$actual"
    printf "  Expected: '%s'\n"  "$expected"
    printf "***********************************\n"
    FINAL_STATUS=1
  fi
}

current_path=$(pwd)
path=$(mktemp -d 'rubocop-diff.XXXXXXXXXX' -t)

cd "$path" || exit 1

printf "Initialize example with a file containing offences\n"

git init
git config user.email "test@example.com"
git config user.name "Rubocop"

echo 'vendor/*' >> .gitignore

cp "$current_path"/Gemfile .
cp "$current_path"/Gemfile.lock .

mkdir -p vendor

if  [ -n "${GITHUB_WORKSPACE}" ];then
  ln -s "${GITHUB_WORKSPACE}/vendor/bundle" vendor/bundle
fi

bundle config --local path vendor/bundle
bundle install

cp "$current_path"/test/examples/file_with_offences.rb file.rb
git add .
git commit -m "First commit"

printf "\n"
printf "Adding more offences to the repo\n"
cp "$current_path"/test/examples/file_with_more_offences.rb file.rb
git add .
git commit -m "Add more offences"

output=$("$current_path"/bin/rubocop-diff)
exit_code="$?"
last_output=$(printf "%s\n" "$output" | tail -1)
expected_output="❌ 2 offences introduced"

assert_equals "It returns exit status 1"        "$exit_code" 1
assert_equals "It returns total added offences" "$last_output" "$expected_output"

printf "\n"
printf "Remove offences\n"

cp "$current_path"/test/examples/file_with_no_offence.rb file.rb
git add .
git commit -m "Remove offences"

output=$("$current_path"/bin/rubocop-diff)
exit_code="$?"
last_output=$(printf "%s\n" "$output" | tail -1)
expected_output="✅ 3 offences corrected"

assert_equals 'It returns exit status'          "$exit_code" 0
assert_equals 'It returns total added offences' "$last_output" "$expected_output"

printf "\n"
exit "$FINAL_STATUS"
